# -*- coding: utf-8 -*-
"""Term;ProjectChandiniRajendra.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RKyWxprtA6spbkLVoHmBlvoZB_Li_X59
"""

!pip install pandas matplotlib seaborn scikit-learn

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

import kagglehub

# Download latest version
path = kagglehub.dataset_download("thedevastator/airbnb-prices-in-european-cities")

print("Path to dataset files:", path)

import os

# List all files in the dataset directory
for root, dirs, files in os.walk("/kaggle/input/airbnb-prices-in-european-cities"):
    for file in files:
        print(file)

# Replace 'filename.csv' with the actual file name printed above
file_path = "/kaggle/input/airbnb-prices-in-european-cities/london_weekdays.csv"
df = pd.read_csv(file_path)
df.head()

# Shape and columns
print("Shape of dataset:", df.shape)
print("\nColumn names:\n", df.columns.tolist())

# Info about datatypes
df.info()

# Summary statistics
df.describe()

# Count of nulls per column
df.isnull().sum()

# Drop unnecessary columns (e.g., Unnamed: 0)
df = df.drop(columns=['Unnamed: 0'])

# Handle missing values if any
df = df.dropna()  # or use df.fillna() if needed

# Convert types if needed
df['room_type'] = df['room_type'].astype('category')

import matplotlib.pyplot as plt
import seaborn as sns

# Distribution of price
sns.histplot(df['realSum'], bins=50)
plt.title("Distribution of Airbnb Prices in London")
plt.show()

# Average price by room type
sns.boxplot(x='room_type', y='realSum', data=df)
plt.title("Price Distribution by Room Type")
plt.show()

# Correlation heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(df.corr(numeric_only=True), annot=True, cmap='coolwarm')
plt.title("Correlation Heatmap")
plt.show()

import numpy as np

# Evaluate
mse_lr = mean_squared_error(y_test, y_pred_lr)
rmse_lr = np.sqrt(mse_lr)
r2_lr = r2_score(y_test, y_pred_lr)

print("Linear Regression RMSE:", rmse_lr)
print("Linear Regression R2 Score:", r2_lr)

import sklearn
print(sklearn.__version__)

from sklearn.ensemble import RandomForestRegressor

# Train Random Forest
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

# Predict
y_pred_rf = rf_model.predict(X_test)

# Evaluate
mse_rf = mean_squared_error(y_test, y_pred_rf)
rmse_rf = np.sqrt(mse_rf)
r2_rf = r2_score(y_test, y_pred_rf)

print("Random Forest RMSE:", rmse_rf)
print("Random Forest R2 Score:", r2_rf)

# Comparison Summary
comparison_df = pd.DataFrame({
    'Model': ['Linear Regression', 'Random Forest'],
    'RMSE': [rmse_lr, rmse_rf],
    'R2 Score': [r2_lr, r2_rf]
})

print(comparison_df)

# Feature Importance from Random Forest
import matplotlib.pyplot as plt

feature_importance = pd.Series(rf_model.feature_importances_, index=X.columns)
feature_importance.sort_values().plot(kind='barh')
plt.title('Feature Importance (Random Forest)')
plt.xlabel('Importance Score')
plt.show()

